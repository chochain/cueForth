#+title: Llama Intro
#+subtitle: Large Language Modeling on your desktop
#+OPTIONS: toc:nil num:nil html-postamble:nil ^:{} reveal_title_slide:nil
#+AUTHOR: Chochain Lee
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 2
#+REVEAL_EXTRA_CSS: ./org-reveal.css
#+REVEAL_INIT_OPTIONS: slideNumber:"c/t", transition:"none", transitionSpeed:"fast", controlsTutorial:false, minScale:1.0, maxScale:1.5
#+REVEAL_EXTRA_SCRIPT: for(let e of document.getElementsByClassName("figure-number")){e.parentElement.classList.add("fig-caption");}
#+REVEAL_TITLE_SLIDE: <h2 class="title">%t</h2><em>%s</em><br><br>%a<br>%d<br>
#+REVEAL_PLUGINS: highlight notes
#+MACRO: color @@html:<font color="$1">$2</font>@@

* Llama
+ From Meta (Facebook)
+ vs ChatGPT and Gemini
+ Large Language Model Meta AI
  [[https://raw.githubusercontent.com/chochain/tensorForth/master/docs/img/llama.png]]
* Chronicle
#+ATTR_REVEAL: :frag roll-in
+ 2023-03: v1 leaked to 4chan
+ 2023-07: v2 with Microsoft
  - 7B, 13B, 70B params
+ 2024-04: v3 to public
  - 8B, 70B params
+ 2024-07: v3.2, small models
  - 1B, 3B, 11B params
* Look for
#+ATTR_REVEAL: :frag roll-in
+ Llama.cpp
  - C/C++
  - full suite
+ llama2.c
  - pure C
  - one file, 700+ lines
+ Ollama
  - Wrapper for Llama.cpp
  - user friendly UI
  - but, we prefer source codes
* Llama.cpp
#+ATTR_REVEAL: :frag roll-in
+ by AI veteran, G. Gerganov
+ Open Source, Cross Platform
+ Full source in C/C++
+ Supports almost all models
+ GPU optional
** Build Llama.cpp
Get
#+begin_src
  git clone https://github.com/ggerganov/llama.cpp
  cd llama.cpp
#+end_src
Build
#+begin_src
  cmake -B build
  cmake --build build --config Release
#+end_src
Models
#+begin_src
 most models work
 HuggingFace, login needed
#+end_src
** Run Llama.cpp
#+begin_src
./bin/llama-cli -m ./models/Llama-3.2-1B-Instruct-Q4_K_M.gguf
> how to build Forth core on FPGA
Building a Forth core on an FPGA (Field-Programmable Gate Array) is a complex task that requires a deep understanding of both the Forth programming language and the FPGA design process. I'll provide a general overview of the steps involved, but keep in mind that this is a simplified guide and may require additional research and expertise.

**Required Components:**
1. **Forth compiler:** A Forth compiler is a custom-built compiler that translates the Forth code into machine code that can be executed on the FPGA.
2. **FPGA design:** A design for a Forth core on an FPGA, including the digital circuitry and hardware components required to execute the Forth code.
3. **Tools and software:** A set of tools and software for the FPGA design and synthesis, such as Vivado, Xilinx, or Intel Quartus.
**Step-by-Step Guide:**
1. **Design the Forth compiler:**
	* Create a Forth compiler that can translate Forth code into machine code (e.g., Verilog or VHDL).
	* Implement a compiler that can handle various Forth dialects and syntax.
	* Include a code editor and debugger that can support Forth.
2. **Design the FPGA core:**
	* Choose an FPGA platform (e.g., Xilinx Zynq, Intel Cyclone 10) and design the FPGA core architecture.
...

**Tools and Software:**
1. **Vivado:** A popular tool for designing and synthesizing FPGA designs.
...

**Conclusion:**
Building a Forth core on an FPGA is a complex task that requires significant expertise in both Forth programming and FPGA design. However, with careful planning and design, it is possible to create a functional Forth core on an FPGA. Be sure to research and consult with experts in both areas before starting your project.
#+end_src  
* llama2.c
#+ATTR_REVEAL: :frag roll-in
+ by A. Karpathy (Tesla, OpenAI)
+ Open Source
+ Easy 700+ lines C
+ Llama2 only
+ No GPU (see llama2.cu)
** Build llama2.c
Get
#+begin_src
  git clone https://github.com/karpathy/llama2.c.git
  cd llama2.c
#+end_src
Build
#+begin_src
  make run
#+end_src
Models
#+begin_src
  15M, 42M, 110M, from tinyStories dataset
  7B possible with some work
#+end_src
** Run llama2.c
#+begin_src
./run stories110M.bin -t 0.8 -n 1024 -i "tell me a story"
tell me a story about a fairy. She is very small and has wings.
She lives in a big tree with her friends. They like to play and sing and dance.
One day, a boy finds the fairy in the garden. He is very happy and wants to keep her.
He puts her in a jar and takes her to his room. He thinks she is pretty and sweet.
But the fairy does not like the boy. She misses her friends and her tree.
She tries to fly away, but the jar is too tight. She is sad and scared.
The boy's mom sees the fairy in the jar. She is surprised and angry.
She tells the boy to let the fairy go. She says the fairy is not a toy, she is a living thing.
She says the boy should not keep her in a jar. She says he should be kind and gentle to fairies.
The boy feels sorry and ashamed. He takes the jar to the garden and opens the lid.
The fairy flies out and hops on his finger. She thanks him for setting her free.
She says she will give him a wish. She says he can wish for anything he wants.
The boy thinks for a moment. He wishes for a new bike. He says thank you to the fairy.
He says he will be good and kind to her. He says he will visit her and her tree and her friends.
The fairy smiles and nods. She says she will see him soon.
She says goodbye and flies away. The boy watches her go. He is happy and amazed.
He has a new bike and new friends. He has learned a lesson. He has been kind and gentle.
achieved tok/s: 9.860246
#+end_src
* Thoughts
#+ATTR_REVEAL: :frag roll-in
+ Easy to acquire and build
+ Many sites on the subject
+ Small models available
+ Lower end CPU and MCU OK
+ No GPU needed
+ Potential for FPGA
* Thank You!
