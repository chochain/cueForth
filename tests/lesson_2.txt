.( ### small matrix creation with given values ) cr
2 3 matrix{ 1 2 3 4 5 6 }    \ create a 2x3 matrix
dup .                        \ create a view and print it

3 2 matrix ones              \ create a 3x2 matrix filled with 1s
@ .                          \ multiply matrices and print

2drop                        \ drop the original two matrices

cr .( ### large matrix multiplication ) cr
512 1024 matrix rand         \ create a 512x1024 matrix with random values
1024 256 matrix ones         \ create a 1024x256 matrix filled with 1s
@                            \ multiply the matrices
2048 / .                     \ scale down element-wise and print
2drop                        \ clean up

cr .( ### benchmark - 100 loops ) cr
: mx dup >r clock >r         \ create a word for benchmark loops
  for @ drop next            \ loop of matrix multiplication (and drop the result)
  clock r> -                 \ clock it
  r> 1 + / ." =>"            \ retrieve loop count and calc average
  . ."  msec/cycle" cr ;     \ print result
see mx                       \ show the word
99 mx                        \ run 100 the multiplication loop 100 times

2drop                        \ drop the original two matrices

cr .( ### matrix inversion ) cr
4 4 matrix randn             \ create a 4x4 matrix with normal distributed value
dup .                        \ check values
inverse                      \ deduce the inverse matrix
dup .                        \ see the inverse
cr .( ### verify M*M^-1 = I ) cr
@                            \ multiply the matrices
.                            \ validate => identity matrix (-0.0000 OK, hopefully within EPS)

2drop                        \ drop the last tow matrices

cr .( ## linear algebra - destructive ## ) cr
.( ### matrix addition )
2 3 matrix{ 1 2 3 4 5 6 }    \ create a 2x3 matrix
2 3 matrix ones              \ create a 2x3 matrix filled with 1s
2dup                         \ create 2 views (for next op)
+= .                         \ add matrices (destructive) and print

cr .( ### matrix subtraction ) cr
-= .                         \ subtract matrices (destructive) and print
drop

cr .( ### matrix multiplication ) cr
2 3 matrix{ 1 2 3 0 4 5 }    \ create a 2x3 matrix
3 2 matrix ones              \ create a 3x2 matrix filled with 1s
@= dup .                     \ multiply (destructive) and print

cr .( ### matrix element-wise multiplication ) cr
2 2 matrix ones              \ create a matrix filled with 1s
0.5 *=                       \ matrix-scalar multiply (scale up)
*=                           \ matrix-matrix multiply (Hadamard)
.                            \ show it

bye

